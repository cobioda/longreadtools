# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/transfer_annotations.ipynb.

# %% auto 0
__all__ = ['subset_common_cells', 'transfer_obs']

# %% ../nbs/transfer_annotations.ipynb 4
import scanpy as sc


def subset_common_cells(dataset1, dataset2):
    """
    Correctly subsets `dataset1` to only include cells that are also present in `dataset2`,
    ensuring the result has at most as many cells as in the intersection.
    
    Parameters:
    - dataset1: AnnData object
    - dataset2: AnnData object
    
    Returns:
    - AnnData object: Subset of `dataset1` containing only cells also found in `dataset2`.
    """
    # Find common cells by intersecting the cell identifiers of both datasets
    common_cells = dataset1.obs_names.intersection(dataset2.obs_names)
    
    # Explicitly subset dataset1 to only include these common cells
    subset_dataset1 = dataset1[common_cells, :].copy()
    
    return subset_dataset1


# %% ../nbs/transfer_annotations.ipynb 5
import pandas as pd
import anndata as ad

def transfer_obs(dataset1, dataset2):
    """
    Transfers .obs metadata from dataset1 to dataset2 one by one. The .var DataFrame of dataset2 is preserved.
    
    Parameters:
    - dataset1: Source AnnData object with .obs metadata to transfer.
    - dataset2: Target AnnData object to receive .obs metadata from dataset1, column by column.
    
    Returns:
    - AnnData: The modified dataset2 with .obs from dataset1 transferred one by one and original .var preserved.
    """
    # Ensure dataset2's .var is preserved without altering its contents
    var_dataset2 = dataset2.var.copy()
    
    # Clear current .obs in dataset2 to ensure it only contains metadata from dataset1
    dataset2.obs = pd.DataFrame(index=dataset2.obs.index)
    
    # Loop through each column in dataset1.obs and transfer it to dataset2.obs
    for column_name in dataset1.obs.columns:
        # Transfer each column individually
        dataset2.obs[column_name] = dataset1.obs[column_name].copy()

    # Reapply the saved .var to dataset2 to ensure it's preserved
    dataset2.var = var_dataset2

    return dataset2
