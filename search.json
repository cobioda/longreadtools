[
  {
    "objectID": "isomatrix_tools.html",
    "href": "isomatrix_tools.html",
    "title": "Isomatrix Tools",
    "section": "",
    "text": "The Isomatrix Tools module provides a comprehensive set of utilities for working with isomatrices, particularly those generated by the scisclor tool. One of the key functionalities of this module is the conversion of isomatrix text files, which are the output of scisclor, into AnnData objects that are compatible with the Scanpy library. This conversion process is crucial for enabling downstream analysis of single-cell long-read data within the Scanpy ecosystem, allowing users to leverage its powerful analytical capabilities. The module ensures that the conversion retains all necessary gene and transcript information, and it supports the creation of both dense and sparse matrix representations to cater to different computational needs.\n\nsource\n\nisomatrix_to_anndata\n\n isomatrix_to_anndata (file_path:str, sparse:bool=False)\n\nThis function converts an isomatrix txt file (SiCeLoRe output) into an AnnData object compatible with scanpy\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nstr\n\nThe path to the isomatrix csv file to be read.\n\n\nsparse\nbool\nFalse\nFlag to determine if the output should be a sparse matrix.\n\n\nReturns\nAnnData\n\nThe converted isomatrix as a scanpy compatible anndata object\n\n\n\nThis section pertains to the retrieval of sample data which is essential for testing and validating the functionality of the Isomatrix Tools module. The sample data is an isomatrix text file, which is a typical output of the SiCeLoRe pipeline, and is used to ensure that the conversion to an AnnData object is performed correctly. The downloaded file is also used in the demonstration and testing of other functions within this module.\n\nsource\n\n\ndownload_test_data\n\n download_test_data ()\n\nThis function downloads a test data file from a specified URL, saves it locally, and extracts it.\nThe Isomatrix Tools module includes functionality to simulate an isomatrix, which is a matrix representation of transcript expression data. This simulated data can be used for testing and validation purposes within the Isomatrix Tools framework. The simulation is designed to mimic the structure and characteristics of real transcriptomic datasets, allowing users to generate data with specified parameters such as the number of genes, transcripts per gene, number of samples, sparsity of the matrix, and maximum expression levels. The simulate_isomatrix function in the code block below provides a practical example of how such data can be generated for use with Isomatrix Tools.\n\nsource\n\n\nsimulate_isomatrix\n\n simulate_isomatrix (num_genes:int, num_transcripts_per_gene:int,\n                     num_samples:int, sparsity:float=0.95,\n                     max_expression:int=100, seed:int=0)\n\nSimulate transcript expression data to match the structure of the first image provided by the user. Allows specifying the number of genes, transcripts per gene, and samples.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnum_genes\nint\n\nnumber of genes (groups of rows)\n\n\nnum_transcripts_per_gene\nint\n\nnumber of transcripts per gene\n\n\nnum_samples\nint\n\nnumber of samples (columns)\n\n\nsparsity\nfloat\n0.95\nfraction of zeros in the data (default 0.95)\n\n\nmax_expression\nint\n100\nmaximum expression level for any transcript in any sample\n\n\nseed\nint\n0\nrandom seed for reproducibility\n\n\nReturns\nDataFrame\n\nDataFrame with simulated transcript expression data for demonstration purposes.\n\n\n\nThe isomatrix_tools module provides functionality to simulate and generate multiple isomatrix datasets. These datasets are essential for testing and demonstrating the capabilities of downstream analysis tools. The simulation process involves creating synthetic gene expression data that closely resembles real-world isomatrix data structures. This includes the ability to specify the number of genes, transcripts per gene, samples, and control the sparsity and maximum expression levels of the generated data. The simulate_and_save_isomatrices function within this module is particularly useful for creating a series of isomatrix files, which can be saved to a specified directory for further use in pipeline testing or demonstration purposes. The function also offers options to return the file paths of the generated isomatrices and to output progress messages during the simulation process.\n\nsource\n\n\nsimulate_and_save_isomatrices\n\n simulate_and_save_isomatrices (num_isomatrix:int, num_genes:int,\n                                num_transcripts_per_gene:int,\n                                num_samples:int, sparsity:float=0.95,\n                                max_expression:int=100, seed:int=0,\n                                output_dir:str='./',\n                                return_paths:bool=False,\n                                verbose:bool=False)\n\nSimulate multiple isomatrix and save them as txt files in the specified directory. If return_paths is True, return a list of paths to the saved isomatrix files.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnum_isomatrix\nint\n\nnumber of isomatrix to generate\n\n\nnum_genes\nint\n\nnumber of genes (groups of rows)\n\n\nnum_transcripts_per_gene\nint\n\nnumber of transcripts per gene\n\n\nnum_samples\nint\n\nnumber of samples (columns)\n\n\nsparsity\nfloat\n0.95\nfraction of zeros in the data (default 0.95)\n\n\nmax_expression\nint\n100\nmaximum expression level for any transcript in any sample\n\n\nseed\nint\n0\nrandom seed for reproducibility\n\n\noutput_dir\nstr\n./\ndirectory to save the generated isomatrix txt files\n\n\nreturn_paths\nbool\nFalse\nreturn paths to the isomatrixs as a list of strings if True\n\n\nverbose\nbool\nFalse\nprint progress messages if True\n\n\nReturns\nlist\n\nlist of paths for the simulated matrices (if return is set True)\n\n\n\n\nsource\n\n\nconvert_and_save_file\n\n convert_and_save_file (sample:str, verbose:bool, sparse:bool=False)\n\nConvert an isomatrix txt file to an AnnData h5ad file and save it to disk. If the file already exists, it is overwritten. A delay and retry mechanism is implemented to handle file locking issues.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsample\nstr\n\npath to the isomatrix txt file\n\n\nverbose\nbool\n\nprint progress messages if True\n\n\nsparse\nbool\nFalse\nstore the anndata object in sparse format if True\n\n\nReturns\nstr\n\npath to the converted h5ad file\n\n\n\n#he Isomatrix tools module provides a suite of functions designed to facilitate the conversion of isomatrix files into AnnData objects, which are suitable for downstream analysis in single-cell genomics workflows. This module includes a function multiple_isomatrix_conversion that efficiently processes batches of isomatrix files, leveraging parallel processing to expedite the conversion. The converted AnnData objects can optionally be stored in a sparse format to optimize memory usage. Additionally, the module contains functions for handling file I/O operations, such as checking for the existence of files and implementing a retry mechanism to address file locking issues during the write process. The module also includes functionality to standardize feature sets across multiple datasets, ensuring consistency in subsequent analyses.\n\nsource\n\n\nmultiple_isomatrix_conversion\n\n multiple_isomatrix_conversion (file_paths:list, verbose:bool=False,\n                                return_paths:bool=False,\n                                sparse:bool=False)\n\nThis function takes a list of file paths, converts each file from isomatrix to anndata format, and saves the converted file in the same location with the same name but with a .h5ad extension. If return_paths is True, it returns a list of paths to the converted files. If sparse is True, the anndata object will be stored in sparse format.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_paths\nlist\n\nA list of file paths to be converted.\n\n\nverbose\nbool\nFalse\nIf True, print progress messages.\n\n\nreturn_paths\nbool\nFalse\nIf True, return a list of paths to the converted files.\n\n\nsparse\nbool\nFalse\nIf True, the anndata object will be stored in sparse format.\n\n\nReturns\nlist\n\nA list of paths to the converted files.\n\n\n\nThe Isomatrix tools module includes advanced functionality for standardizing transcript features across multiple isoform matrix datasets. This process is crucial for ensuring that subsequent analyses are consistent and comparable. The module provides the option to standardize features by either taking the union or the intersection of all transcripts present in the datasets. The ‘union’ method combines all unique transcripts from each dataset, thus preserving the full range of features. In contrast, the ‘intersection’ method retains only those transcripts that are common to all datasets, which can be beneficial for comparative studies where only shared features are of interest. This flexibility allows researchers to tailor the standardization process to their specific analytical needs and the nature of their datasets.\n\nsource\n\n\nfeature_set_standardization\n\n feature_set_standardization (adatas:list,\n                              standardization_method:str='union')\n\nStandardize the feature sets of multiple AnnData objects.\nThis function takes a list of AnnData objects or paths to AnnData files and a standardization method as input. The standardization method can be either ‘union’ or ‘intersection’. If ‘union’ is chosen, the function will create a union of all features across all AnnData objects. If ‘intersection’ is chosen, the function will create an intersection of all features across all AnnData objects. The function returns a list of standardized AnnData objects.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nadatas\nlist\n\nlist of AnnData objects or paths to AnnData files\n\n\nstandardization_method\nstr\nunion\nstr specifiying method to use union or intersection\n\n\nReturns\nlist\n\nlist of anndata objects with the features standardised\n\n\n\nThe Isomatrix tools module includes a function to validate and prepare an AnnData object for serialization and storage. This function ensures that the AnnData object conforms to the requirements for writing to disk as an .h5ad file, which is the file format used by Scanpy’s write_h5ad method. The function checks for the presence of missing values in the .var and .obs DataFrames, converts non-string categorical data to strings, ensures that the observation and variable names are of string data type, and verifies that there are no duplicate names. Additionally, it checks for NaN values in the .X attribute, which holds the main data matrix, and provides warnings if any issues are detected that could interfere with the file writing process. This preprocessing step is crucial for maintaining data integrity and ensuring compatibility with downstream analysis tools that rely on the .h5ad file format.\n\nsource\n\n\ncheck_anndata_for_saving\n\n check_anndata_for_saving (adata:anndata._core.anndata.AnnData,\n                           verbose:bool=False)\n\nPrepare an AnnData object for saving by ensuring proper data types and handling missing values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nadata\nAnnData\n\nThe AnnData object to check.\n\n\nverbose\nbool\nFalse\nIf True, print status messages. Defaults to False.\n\n\n\nThis module provides functionality to concatenate multiple AnnData objects, which are essential data structures for storing large-scale single-cell genomics data. The concatenation process is designed to combine data from different batches or experiments, while ensuring that the resulting AnnData object maintains the integrity and structure necessary for downstream analysis. The Isomatrix tools facilitate this process by handling discrepancies in data types, filling missing values, and standardizing feature sets across all input datasets. This ensures that the concatenated dataset is ready for high-throughput computational analyses, such as clustering, visualization, and differential expression testing, which are common in single-cell genomics workflows.\n\nsource\n\n\nmake_unique_batch_keys\n\n make_unique_batch_keys (batch_keys)\n\n\nsource\n\n\nconcatenate_anndata\n\n concatenate_anndata (h5ad_inputs:list, standardization_method='union',\n                      sparse=False, verbose=False)\n\nThis function concatenates multiple AnnData objects into a single AnnData object and adds batch keys to identify the origin of each sample.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nh5ad_inputs\nlist\n\nA list of AnnData objects or paths to .h5ad files.\n\n\nstandardization_method\nstr\nunion\nThe method to standardize the feature sets across all AnnData objects. It can be either ‘union’ or ‘intersection’. Default is ‘union’.\n\n\nsparse\nbool\nFalse\nOptional flag to convert the final matrix to sparse. Default is False.\n\n\nverbose\nbool\nFalse\nOptional flag to print progress updates. Default is False.\n\n\nReturns\nAnnData\n\nThe concatenated AnnData object.\n\n\n\n\nsource\n\n\nmake_unique_batch_keys\n\n make_unique_batch_keys (batch_keys)",
    "crumbs": [
      "Isomatrix Tools"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LongReadTools",
    "section": "",
    "text": "LongReadTools",
    "crumbs": [
      "LongReadTools"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "LongReadTools",
    "section": "Install",
    "text": "Install\npip install git+https://github.com/cobioda/longreadtools.git",
    "crumbs": [
      "LongReadTools"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "LongReadTools",
    "section": "How to use",
    "text": "How to use\n\nFor detailed instructions on how to use LongReadTools, please refer to the documentation.",
    "crumbs": [
      "LongReadTools"
    ]
  },
  {
    "objectID": "inference_tools.html",
    "href": "inference_tools.html",
    "title": "Inference Tools",
    "section": "",
    "text": "isoform_anndata_from_long_reads = sc.read_h5ad(\"/data/analysis/data_mcandrew/000-sclr-discovair/discovair_long_read_transcript_matrix_annotated.h5ad\")\n\n\nisoform_anndata_from_long_reads.X\n\narray([[1., 0., 0., ..., 0., 0., 0.],\n       [1., 1., 2., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [3., 0., 0., ..., 0., 0., 0.],\n       [1., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)\n\n\n\nsource\n\nget_gene_mat\n\n get_gene_mat (adata, gene_column_name='geneId')\n\n\ngene_matrix = get_gene_mat(isoform_anndata_from_long_reads)\n\n\nsource\n\n\nget_iso_prop\n\n get_iso_prop (adata, gene_column_name)\n\n\nisoform_anndata_from_long_reads.obsm[\"isoform_proportions\"] = get_iso_prop(isoform_anndata_from_long_reads, gene_column_name='geneId')",
    "crumbs": [
      "Inference Tools"
    ]
  },
  {
    "objectID": "harmonisation_tools.html",
    "href": "harmonisation_tools.html",
    "title": "Harmonization Tools",
    "section": "",
    "text": "Harmonize two datasets by extracting a subset from one dataset containing only the cells that are also present in the other dataset, and by ensuring that the metadata and gene expression measurements are compatible for comparative analysis. This process facilitates the integration of datasets from different sequencing technologies or experimental conditions, allowing for robust downstream analyses such as differential expression, clustering, and trajectory inference.\n\nsource\n\nsubset_common_cells\n\n subset_common_cells (dataset1:anndata._core.anndata.AnnData,\n                      dataset2:anndata._core.anndata.AnnData)\n\nSubset dataset1 to only include cells that are also present in dataset2.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndataset1\nAnnData\nFirst dataset to be subsetted.\n\n\ndataset2\nAnnData\nSecond dataset to compare with.\n\n\nReturns\nAnnData\nSubset of dataset1 containing only cells also found in dataset2.\n\n\n\nTransfer the .obs attribute from one AnnData object to another, ensuring compatibility in .obs dimensionality and preserving the .var DataFrame. This function is designed to maintain the integrity of the target dataset’s gene expression information while enriching it with the metadata from the source dataset. It is a crucial step in the harmonization process, allowing for integrated analysis of datasets from different sources.\n\nsource\n\n\ntransfer_obs\n\n transfer_obs (dataset1:anndata._core.anndata.AnnData,\n               dataset2:anndata._core.anndata.AnnData)\n\nTransfer .obs metadata from dataset1 to dataset2 one by one, while preserving the .var DataFrame of dataset2.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndataset1\nAnnData\nSource AnnData object with .obs metadata to transfer.\n\n\ndataset2\nAnnData\nTarget AnnData object to receive .obs metadata.\n\n\nReturns\nAnnData\nThe modified dataset2 with .obs from dataset1 transferred.",
    "crumbs": [
      "Harmonization Tools"
    ]
  }
]